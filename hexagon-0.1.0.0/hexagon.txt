-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | 2D Hexagonal Grid Geometry
--   
--   Types and basic operations on hexagons within hexagonal grids.
@package hexagon
@version 0.1.0.0


module Data.Hexagon

-- | The fundamental coordinate type for a 2D hexagonal grid.
data Hexagon ori

-- | The orientation in which hexagons have a horizontal edge on the top.
--   
--   <pre>
--   Pictorially:      __
--                  __/  \__
--                 /  \__/  \
--                 \__/  \__/
--                 /  \__/  \
--                 \__/  \__/
--                    \__/
--   </pre>
data FlatTop
FlatTop :: FlatTop

-- | The orientation in which hexagons have vertical edges on the sides.
--   
--   <pre>
--   Pictorially:
--                  /\   /\
--                 /  \ /  \
--                |    |    |
--                |    |    |
--                 \  / \  /
--                  \/   \/
--   </pre>
data PointyTop
PointyTop :: PointyTop

-- | Relative directions with respect to "Top-Bottom"-ness.
--   
--   On a FlatTop, these correspond to the edges:
--   
--   <pre>
--               Top
--               ____
--      TopLeft /    \ TopRight
--             /      \
--             \      /
--   BottomLeft \____/ BottomRight
--              Bottom
--   </pre>
--   
--   On a PointyTop, these correspond to the corners:
--   
--   <pre>
--              Top
--               /\
--     TopLeft  /  \ TopRight
--             |    |
--             |    |
--   BottomLeft \  / BottomRight
--               \/
--             Bottom
--   </pre>
data TopBottomDir
BottomRight :: TopBottomDir
Bottom :: TopBottomDir
BottomLeft :: TopBottomDir
TopLeft :: TopBottomDir
Top :: TopBottomDir
TopRight :: TopBottomDir

-- | Relative directions with respect to "East-West"-ness.
--   
--   On a FlatTop, these correspond to the corners:
--   
--   <pre>
--   NorthWest ____ NorthEast
--            /    \
--      West /      \  East
--           \      /
--            \____/
--    SouthWest    SouthEast
--   </pre>
--   
--   On a PointyTop, these correspond to the edges:
--   
--   <pre>
--   NorthWest /\ NorthEast
--            /  \
--           |    |
--      West |    | East
--            \  /
--   SouthWest \/ SouthEast
--   </pre>
data EastWestDir
East :: EastWestDir
SouthEast :: EastWestDir
SouthWest :: EastWestDir
West :: EastWestDir
NorthWest :: EastWestDir
NorthEast :: EastWestDir

-- | Locks down which relative directions correspond to edges/corners on a
--   given orientation.
class Orientation ori where type family EdgeDir ori :: * type family CornerDir ori :: *

-- | Compute the hexagon which borders the argument hexagon on the relative
--   edge.
neighbor :: Orientation ori => EdgeDir ori -> Hexagon ori -> Hexagon ori

-- | Retrieves all neighbors for a hexagon in no particular order.
neighbors :: Hexagon ori -> [Hexagon ori]

-- | Kind of like a monomorphic zipWith on two Hexagons. In pseudo-Haskell:
--   
--   <pre>
--   let ax = toHexagon Axial
--       h  = (x, y ) :: (Integer, Integer)
--       h' = (x',y') :: (Integer, Integer)
--       f            :: Integer -&gt; Integer -&gt; Integer
--   binOp f (ax h) (ax h') &lt;-&gt; ax $ (f x x', f y y')
--   </pre>
binOp :: (Integer -> Integer -> Integer) -> Hexagon ori -> Hexagon ori -> Hexagon ori

-- | Adds the corresponding components of two Hexagons.
--   
--   <pre>
--   plus = binOp (+)
--   </pre>
plus :: Hexagon ori -> Hexagon ori -> Hexagon ori

-- | Subtracts the corresponding components of two Hexagons.
--   
--   <pre>
--   minus = binOp (-)
--   </pre>
minus :: Hexagon ori -> Hexagon ori -> Hexagon ori

-- | Multiplies the corresponding components of two Hexagons.
--   
--   <pre>
--   times = binOp (*)
--   </pre>
times :: Hexagon ori -> Hexagon ori -> Hexagon ori

-- | Computes the distance between two Hexagons. This distance can be
--   thought of the length of the straight-line path between two Hexagons.
dist :: Hexagon ori -> Hexagon ori -> Integer

-- | Returns a list of all Hexagons on the straight-line path from the
--   first Hexagon to the second Hexagon, including both as endpoints.
lineTo :: Hexagon ori -> Hexagon ori -> [Hexagon ori]

-- | All Hexagons within a given distance from the argument Hexagon.
range :: Hexagon ori -> Integer -> [Hexagon ori]

-- | Same as <a>range</a> except it factors in which Hexagons are blocked.
--   
--   The predicate you pass to this function asks if a given Hexagon is
--   blocked. For example:
--   
--   <pre>
--   let origin                     = toHexagon Axial (0,0)
--       blockCircleWithRadius4 hex = dist origin hex &lt; 4
--       take10Steps                = 10
--       startHex                   = toHexagon Axial (2,2)
--   in rangeWithBlocked startHex take10Steps blockCircleWithRadius4
--   </pre>
--   
--   In the above example, the function starts at the Hexagon located at
--   Axial(2,2). It takes as many as ten steps from that start location. It
--   skips any Hexagon that is closer than four units from the origin. The
--   result it returns is all of the Hexagons that could have been stepped
--   on.
rangeWithBlocked :: Hexagon ori -> Integer -> (Hexagon ori -> Bool) -> [Hexagon ori]

-- | Retrieves all Hexagons contained in the ring of given radius about the
--   argument Hexagon.
--   
--   In pseudo-Haskell:
--   
--   <pre>
--   ringAround h i = [h' | h' &lt;- allHexagons, dist h h' == i]
--   </pre>
ringAround :: Hexagon ori -> Integer -> [Hexagon ori]

-- | Simple sum type for Clockwise/Counter-clockwise.
data RotateDir
CW :: RotateDir
CCW :: RotateDir

-- | Rotate a Hexagon 60 degrees in a given direction about the origin.
rotateAboutOrigin :: RotateDir -> Hexagon ori -> Hexagon ori

-- | Rotate a Hexagon 60 degrees in a given direction about a center
--   Hexagon.
--   
--   <pre>
--   let rotationCenter :: Hexagon ori
--       pointToRotate  :: Hexagon ori
--   in rotateAroundPoint rotationCenter CCW pointToRotate
--   </pre>
rotateAroundPoint :: Hexagon ori -> RotateDir -> Hexagon ori -> Hexagon ori

-- | A class to structure conversions between coordinate systems
class HexCoordTuple t
toHexagon :: HexCoordTuple t => t -> (Integer, Integer) -> Hexagon ori
fromHexagon :: HexCoordTuple t => t -> Hexagon ori -> (Integer, Integer)

-- | The Odd-R Offset coordinate system. See
--   <a>http://www.redblobgames.com/grids/hexagons/</a>
data OddR
OddR :: OddR

-- | The Even-R Offset coordinate system. See
--   <a>http://www.redblobgames.com/grids/hexagons/</a>
data EvenR
EvenR :: EvenR

-- | The Odd-Q Offset coordinate system. See
--   <a>http://www.redblobgames.com/grids/hexagons/</a>
data OddQ
OddQ :: OddQ

-- | The Even-Q Offset coordinate system. See
--   <a>http://www.redblobgames.com/grids/hexagons/</a>
data EvenQ
EvenQ :: EvenQ

-- | The Axial Offset coordinate system. See
--   <a>http://www.redblobgames.com/grids/hexagons/</a>
data Axial
Axial :: Axial
instance GHC.Generics.Constructor Data.Hexagon.C1_0Hexagon
instance GHC.Generics.Datatype Data.Hexagon.D1Hexagon
instance GHC.Enum.Bounded Data.Hexagon.RotateDir
instance GHC.Enum.Enum Data.Hexagon.RotateDir
instance GHC.Show.Show Data.Hexagon.RotateDir
instance GHC.Classes.Ord Data.Hexagon.RotateDir
instance GHC.Classes.Eq Data.Hexagon.RotateDir
instance GHC.Generics.Generic (Data.Hexagon.Hexagon ori)
instance GHC.Show.Show (Data.Hexagon.Hexagon ori)
instance GHC.Classes.Ord (Data.Hexagon.Hexagon ori)
instance GHC.Classes.Eq (Data.Hexagon.Hexagon ori)
instance GHC.Enum.Bounded Data.Hexagon.EastWestDir
instance GHC.Enum.Enum Data.Hexagon.EastWestDir
instance GHC.Show.Show Data.Hexagon.EastWestDir
instance GHC.Classes.Ord Data.Hexagon.EastWestDir
instance GHC.Classes.Eq Data.Hexagon.EastWestDir
instance GHC.Enum.Bounded Data.Hexagon.TopBottomDir
instance GHC.Enum.Enum Data.Hexagon.TopBottomDir
instance GHC.Show.Show Data.Hexagon.TopBottomDir
instance GHC.Classes.Ord Data.Hexagon.TopBottomDir
instance GHC.Classes.Eq Data.Hexagon.TopBottomDir
instance GHC.Enum.Bounded Data.Hexagon.PointyTop
instance GHC.Enum.Enum Data.Hexagon.PointyTop
instance GHC.Show.Show Data.Hexagon.PointyTop
instance GHC.Classes.Ord Data.Hexagon.PointyTop
instance GHC.Classes.Eq Data.Hexagon.PointyTop
instance GHC.Enum.Bounded Data.Hexagon.FlatTop
instance GHC.Enum.Enum Data.Hexagon.FlatTop
instance GHC.Show.Show Data.Hexagon.FlatTop
instance GHC.Classes.Ord Data.Hexagon.FlatTop
instance GHC.Classes.Eq Data.Hexagon.FlatTop
instance Data.Hexagon.Orientation Data.Hexagon.FlatTop
instance Data.Hexagon.Orientation Data.Hexagon.PointyTop
instance Data.Hashable.Class.Hashable (Data.Hexagon.Hexagon ori)
instance Data.Hexagon.HexCoordTuple Data.Hexagon.OddR
instance Data.Hexagon.HexCoordTuple Data.Hexagon.EvenR
instance Data.Hexagon.HexCoordTuple Data.Hexagon.OddQ
instance Data.Hexagon.HexCoordTuple Data.Hexagon.EvenQ
instance Data.Hexagon.HexCoordTuple Data.Hexagon.Axial
